
在业务上系统进行分层实现，包括业务逻辑
层和持久化层，良好的业务封装将会为以后开放服务接口打下坚实的基
础，系统的服务层主要分为两块，一块是求职就业服务基本的增删改查操
作，另一块是根据期望地域和工作领域进行的个性化公司推荐，个性化推
荐模块调用了 ActiveMQ 客户端接口，服务器用的是 ActiveMQ 服务器，
ActiveMQ 是消息队列服务器，它很好的实现了 AMQP（高级消息队列协议）
来进行异步消息处理；持久化层主要调用了 Hibernate 框架，该框架可以
适配各种关系型数据库，包括主流的 Mysql 和 Oracle，而且它对数据库
操作的封装和优化做得很全面；数据库除了采用关系型数据库 Mysql，还
采用了非关系型数据库 Mongodb，这个数据库适合做分布式集群，采用
Mongodb 主要是为了存储用户的认证信息和个性化推荐参数，因为
RESTful 风格的 API 对安全问题目前仍显得无可奈何，把用户认证信息存
储在客户端很不安全，保存在服务器内存中，又违反了 REST 约束，所以


本系统为了能够实现负载均衡和故障转移，采用适合做分布式的 Mongodb
数据库，把 userid 和 sessionid 保存在分布式数据库中，对 Mongodb 数
据库的操作我们调用模板类 MongoTemplate(类似于 JdbcTemplate)，这一
部分主要被访问控制过滤器（将在 3.2.6 节介绍）调用。控制器、业务逻
辑层、持久化层都是通过 Spring 容器进行管理的，减少了层与层之间的
耦合性，让程序员更加专注各层的核心工作，而不必关心它们的生命周期
和依赖关系，使开发工作更加容易，提高开发效率。
