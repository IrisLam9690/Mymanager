田宏论文摘要

为了实现个性处理模块的可插拔式替换，
为了实现个性处理模块的可插 拔式替换，我们需要解耦 业务处理模块和个性化。

API应用程序接口


Ajax 技术支持在不刷新页面的情况下动态更中局部内容。

Web 从最初其设计者所构思的主要支持
静态文档的阶段，逐渐变得越来越动态化

“REST”——Representational State Transfer（表述性状态转移）

在业务上涵盖学生和企业用户的基本需求，在架构上要求具有稳定性、高性能和可
扩展，并且具有开放接口和集成算法引擎进行个性化推荐的能力。


技术使用：

客户端使用 Ajax 技术增强用户体验，服务器端只封装基本的业务功能，在
MongoDB 中保存用户会话状态，服务器端达到无状态，这样能够保障系统后台服
务具有可扩展性和可伸缩性。

架构风格是一种
研究和评价软件架构设计的方法，它是比架构更加抽象的概念。一种架构风格是
由一组相互协作的架构约束来定义的。架构约束是指软件的运行环境施加在架构
设计之上的约束。

REST 是所有 Web 应用都应该遵守的架构设计
指导原则。

一个资源可以由一个或多个 URI 来标识。URI 既是资源的名称，也是资
源在 Web 上的地址。对某个资源感兴趣的客户端应用，可以通过资源的 URI 与其
进行交互。


资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-
服务器端之间转移（交换）。资源的表述可以有多种格式，例如 HTML/XML/JSON/
纯文本/图片/视频/音频等等。

REST 要求，必须通过统一的接口来对资源执行各种操作。对于每个资源只
能执行一组有限的操作。以 HTTP/1.1 协议为例，HTTP/1.1 协议定义了一个操作
资源的统一接口，主要包括以下内容：

A 7 个 HTTP 方法：GET/POST/PUT/DELETE/PATCH/HEAD/OPTIONS
B HTTP 头信息（可自定义）
C HTTP 响应状态代码（可自定义）
D 一套标准的内容协商机制
E 一套标准的缓存机制
F 一套标准的客户端身份认证机制
REST 还要求，对于资源执行的操作，其操作语义必须由 HTTP 消息体之前的
部分完全表达，不能将操作语义封装在 HTTP 消息体内部。


资源之间通过超链接相互关联，超链接既代表资源之间的关系，也代表可执
行的状态迁移。在超媒体之中不仅仅包含数据，还包含了状态迁移的语义。以超
媒体作为引擎，驱动 Web 应用的状态迁移。


1可以充分利用大量 HTTP 服务器端和客户端开发库、Web 功能测试/性能测试工具、HTTP
缓存、HTTP 代理服务器、防火墙。REST 能够简化开发，是因为引入的架构约束。当今大部分网络应用使
用 HTTP 作为 generic connector interface，HTTP 则把对一个 url 的操作
限制在 4 个方法之内：GET、POST、PUT 和 DELETE


，如果本身类似
增删改查的操作，那么抽象成资源就比较容易，对简历、职位、招聘会等的操作，
就是基本的增删改查，抽象成资源是很容易的。

该系统也有一部分没有采用 REST 风格，就是对用户
进行身份验证和权限管理，这部分采用 Servlet 实现的过滤器链，就像刚才提到
的那样，这部分不容易抽象成资源，也不追求有多简化，只要能正确的完成业务
逻辑就行了。

REST 对客户端和服务端任务的分配：服务端负责提供资源以及操作资源的
服务方法，客户端要根据资源中的数据和状态做页面渲染。

该系统使用 Apache CXF(一个开放源码的服务框架)，我们把它的 API
（JAX-RS）嵌入到 Spring 容器中，用于 RESTful Web 服务开发。


由于 Ajax Web 站点应用程序逻辑和状态都在浏览器上驻留并执行，因此应
用程序与服务器的交互就与传统 Web 应用程序的方式有很大的不同。不需要获
取混合的内容页面，只需要获取业务数据即可
[7]
。这样，页面就可以实现局部刷
新，避免闪屏。具有融入式用户体验的服务器端 Web 应用程序通常会在服务器
上保存大量的用户会话状态。

无状态服务的行为是幂等
的，可以由用户请求的内容来单独确定

由于应用程序资源和数据资源的绑定转换到了客户端，因此应用程序
就可以享受这两个世界中最好的东西 —— 融入式 Web 应用程序中动态、个性
化的用户体验，以及遵守 REST 准则的应用程序中简单、可伸缩的架构
[9]


通信接口
业务逻辑方面交互均采用 HTTP 协议进行前后台的通信，数据格式都采用
JSON 格式(满足 REST 风格的约束条件)。



Tomcat 是 Servlet 和 JSP 的容器有独立承担 Web 服务器的能力，但在对静态资源（html 或图片等）的处
理速度，以及提供对 Web 服务器的管理功能方面还是不如专业的 HTTP 服
务器，如 Apache。所以常常把 Tomcat 服务器和 HTTP 服务器集成起来，
HTTP 服务器不支持 Servlet 和 JSP，它只负责处理静态资源，动态资源交
给 Tomcat 这样的应用服务器来处理。



当 Tomcat 服务器与 HTTP 服务器集成时，Tomcat 服务器是进程外的
Servlet 容器，Tomcat 服务器和 HTTP 服务器之间的通信是通过专门的插
件来完成的。



一个 Web 应用程序的“状态”通常指为两个相互关联的用户交互操作保留的
某种公共信息，它们常常被用来存储工作流或用户状态信息等数据。这些信息可
以被指定在不同的作用域，如 page，request，session 或全局作用域，而存储
他们的责任也同样可以由 Client 端或 Server 端负责。
无状态就是任意一个 Web 请求必须完全与其他请求隔离，当请求端提出请求时，请求本身包
含了响应端为响应这一请求所需的全部信息。

与有状态服务设计相比，无状态服务容易实现系统性能的横向扩展。通过添
加硬件，部署多个无状态服务，就可以做到负载均衡；而有状态服务模式，Session
的存储、共享都会带来性能瓶颈，且无法通过添加硬件来消除。



有了 AJAX 就不再
需要加载整个页面，而是把页面和数据分开，每次 AJAX 负责请求数据，再用从
服务器端传回的数据而非整个页面文档去渲染，这样不仅能达到局部刷新的效
果，而且用户的两次请求不再是同步的，用户可以随便的发送请求，因为各个请
求之间只是去请求数据，它们是独立的过程。以前的富客户端需要服务端大力配
合，这将严重违反 REST 风格约束，通过引入 AJAX，把服务端的功能转移到客户
端浏览器，不仅达到了富客户端的目的，而且不会影响到服务端的可伸缩性。


Tomcat 是 Servlet 和 JSP 的容器，随着 Tomcat 版本升级，它已经具有独立
承担 Web 服务器的能力，但在对静态资源（html 或图片等）的处理速度，以及
提供的对 Web 服务器的管理功能方面还是不如专业的 HTTP 服务器，如 Apache。
所以把 Tomcat 服务器和 HTTP 服务器集成起来，HTTP 服务器不支持 Servlet 和
JSP，它只负责处理静态资源，动态资源交给 Tomcat 来处理，由此提升对请求的
处理能力。
